import Mathlib
import ClassFieldTheory.GroupCohomology._6_LeftRegular
import ClassFieldTheory.GroupCohomology._8_DimensionShift

/-!
Let `M : Rep R G`, where `G` is a finite cyclic group.
We construct an exact sequence

  `0 ‚ü∂ M ‚ü∂ coind‚ÇÅ'.obj M ‚ü∂ ind‚ÇÅ'.obj M ‚ü∂ M ‚ü∂ 0`.

Using this sequence, we construct an isomorphism

  `dimensionShift.up.obj M ‚âÖ dimensionShift.down.obj M`.

Using this, construct isomorphisms

  `H‚Åø‚Å∫¬π(G,M) ‚âÖ H‚Åø‚Å∫¬≥(G,M)`.

-/

open
  Finsupp
  Rep
  leftRegular
  dimensionShift
  CategoryTheory
  ConcreteCategory
  Limits
  BigOperators
  groupCohomology


variable {R : Type} [CommRing R]
variable (G : Type) [Group G] [instCyclic :IsCyclic G] [Finite G] [DecidableEq G]
variable (M : Rep R G)

noncomputable section

/--
`gen G` is a generator of the cyclic group `G`.
-/
abbrev gen : G := IsCyclic.exists_generator.choose

variable {G}

@[simp] lemma ofHom_sub (A B : ModuleCat R) (f‚ÇÅ f‚ÇÇ : A ‚Üí‚Çó[R] B) :
  (ofHom (f‚ÇÅ - f‚ÇÇ) : A ‚ü∂ B) = ofHom f‚ÇÅ - ofHom f‚ÇÇ := rfl

@[simp] lemma ofHom_add (A B : ModuleCat R) (f‚ÇÅ f‚ÇÇ : A ‚Üí‚Çó[R] B) :
  (ofHom (f‚ÇÅ + f‚ÇÇ) : A ‚ü∂ B) = ofHom f‚ÇÅ + ofHom f‚ÇÇ := rfl

@[simp] lemma ofHom_zero (A B : ModuleCat R) :
  (ofHom 0 : A ‚ü∂ B) = 0 := rfl

@[simp] lemma ofHom_one (A : ModuleCat R) :
  (ofHom 1 : A ‚ü∂ A) = ùüô A := rfl

omit [IsCyclic G] [Finite G] [DecidableEq G] in
@[simp] lemma Rep.œÅ_mul_eq_comp (M : Rep R G) (x y : G) :
    Action.œÅ M (x * y) = (Action.œÅ M y) ‚â´ (Action.œÅ M x) := map_mul (Action.œÅ M) x y

namespace Representation

variable {A : Type} [AddCommGroup A] [Module R A] (œÅ : Representation R G A)

@[simps] def map‚ÇÅ : (G ‚Üí A) ‚Üí‚Çó[R] (G ‚Üí A) where
  toFun f x := f x - f ((gen G)‚Åª¬π * x)
  map_add' _ _ := by
    ext x
    simp [add_sub_add_comm]
  map_smul' _ _ := by
    ext
    simp [‚Üê smul_sub]

omit [Finite G] [DecidableEq G] in
lemma map‚ÇÅ_comm (g : G) :
    map‚ÇÅ ‚àò‚Çó œÅ.coind‚ÇÅ' g = œÅ.coind‚ÇÅ' g ‚àò‚Çó map‚ÇÅ  := by
  apply LinearMap.ext
  intro
  apply funext
  intro
  simp [mul_assoc]

omit [Finite G] [DecidableEq G] in
lemma map‚ÇÅ_comp_coind_Œπ :
    map‚ÇÅ (R := R) (G := G) (A := A) ‚àò‚Çó coind‚ÇÅ'_Œπ = 0 := by
  ext; simp

omit [Finite G] [DecidableEq G] in
lemma map‚ÇÅ_ker :
    LinearMap.ker (map‚ÇÅ (R := R) (G := G) (A := A)) = LinearMap.range coind‚ÇÅ'_Œπ := by
  ext f
  constructor
  ¬∑ intro hf
    rw [LinearMap.mem_ker] at hf
    simp only [coind‚ÇÅ'_Œπ, LinearMap.mem_range, LinearMap.coe_mk, AddHom.coe_mk, ] at hf ‚ä¢
    use f (gen G)‚Åª¬π
    ext x
    obtain ‚ü®n, hx‚ü© : x ‚àà Subgroup.zpowers (gen G) := IsCyclic.exists_generator.choose_spec x
    dsimp at hx
    rw [Function.const_apply, ‚Üê hx]
    dsimp [map‚ÇÅ] at hf
    induction n generalizing x with
    | zero =>
        rw [zpow_zero]
        have := congr_fun hf 1
        simp only [mul_one, Pi.zero_apply] at this
        rw [sub_eq_zero] at this
        exact this.symm
    | succ n hn =>
      have := congr_fun hf ((gen G ^ ((n : ‚Ñ§) + 1)))
      simp only [Pi.zero_apply, sub_eq_zero] at this
      rw [this, hn _ rfl]
      group
    | pred n hn =>
      have := congr_fun hf ((gen G ^ (- (n : ‚Ñ§))))
      simp only [Pi.zero_apply, sub_eq_zero] at this
      rw [zpow_sub_one (gen G) _, hn _ rfl, this]
      group
  ¬∑ rintro ‚ü®_, rfl‚ü©
    exact LinearMap.congr_fun map‚ÇÅ_comp_coind_Œπ _

@[simps!] def map‚ÇÇ : (G ‚Üí‚ÇÄ A) ‚Üí‚Çó[R] (G ‚Üí‚ÇÄ A) :=
  LinearMap.id - lmapDomain _ _ (fun x ‚Ü¶ gen G * x)

omit [Finite G] [DecidableEq G] in
@[simp] lemma map‚ÇÇ_comp_lsingle (x : G) :
    map‚ÇÇ (R := R) (G := G) (A := A) ‚àò‚Çó lsingle x = lsingle x - lsingle (gen G * x) := by
  ext
  simp [map‚ÇÇ, LinearMap.sub_comp]

omit [Finite G] [DecidableEq G] in
lemma map‚ÇÇ_comm (g : G) :
    map‚ÇÇ ‚àò‚Çó œÅ.ind‚ÇÅ' g = œÅ.ind‚ÇÅ' g ‚àò‚Çó map‚ÇÇ := by
  ext x : 1
  rw [LinearMap.comp_assoc, ind‚ÇÅ'_comp_lsingle, LinearMap.comp_assoc, map‚ÇÇ_comp_lsingle,
    LinearMap.comp_sub, ind‚ÇÅ'_comp_lsingle, ‚ÜêLinearMap.comp_assoc, map‚ÇÇ_comp_lsingle,
    LinearMap.sub_comp, ind‚ÇÅ'_comp_lsingle, mul_assoc]

omit [Finite G] [DecidableEq G] in
lemma ind‚ÇÅ'_œÄ_comp_map‚ÇÇ :
    ind‚ÇÅ'_œÄ ‚àò‚Çó map‚ÇÇ (R := R) (G := G) (A := A) = 0 := by
  ext : 1
  rw [LinearMap.comp_assoc, map‚ÇÇ_comp_lsingle, LinearMap.comp_sub,
    LinearMap.zero_comp, sub_eq_zero, ind‚ÇÅ'_œÄ_comp_lsingle, ind‚ÇÅ'_œÄ_comp_lsingle]

lemma map‚ÇÇ_range :
    LinearMap.range (map‚ÇÇ (R := R) (G := G) (A := A)) = LinearMap.ker ind‚ÇÅ'_œÄ := by
  ext f
  constructor
  ¬∑ rintro ‚ü®_, rfl‚ü©
    exact LinearMap.congr_fun ind‚ÇÅ'_œÄ_comp_map‚ÇÇ _
  ¬∑ intro hf
    rw [LinearMap.mem_ker] at hf
    simp only [map‚ÇÇ, LinearMap.mem_range, LinearMap.sub_apply, LinearMap.id_coe, id_eq,
      lmapDomain_apply]
    sorry

end Representation

namespace Rep

/--
The map `coind‚ÇÅ'.obj M ‚ü∂ coind‚ÇÅ' M` which takes a function `f : G ‚Üí M.V` to
`x ‚Ü¶ f x - f (gen G * x)`.
-/
def map‚ÇÅ : coind‚ÇÅ' (R := R) (G := G) ‚ü∂ coind‚ÇÅ' where
  app M := {
    hom := ofHom Representation.map‚ÇÅ
    comm g := by
      ext : 1
      apply Representation.map‚ÇÅ_comm
  }
  naturality L N g := by
    ext v
    dsimp only [Representation.map‚ÇÅ, coind‚ÇÅ']
    ext x
    simp

omit [Finite G] [DecidableEq G] in
lemma coind_Œπ_gg_map‚ÇÅ_app : coind‚ÇÅ'_Œπ.app M ‚â´ map‚ÇÅ.app M = 0 := by
  ext : 2
  apply Representation.map‚ÇÅ_comp_coind_Œπ

omit [Finite G] [DecidableEq G] in
lemma coind_Œπ_gg_map‚ÇÅ : coind‚ÇÅ'_Œπ ‚â´ map‚ÇÅ (R := R) (G := G) = 0 := by
  ext : 2
  apply coind_Œπ_gg_map‚ÇÅ_app

def map‚ÇÇ : ind‚ÇÅ' (R := R) (G := G) ‚ü∂ ind‚ÇÅ' where
  app M := {
    hom := ofHom Representation.map‚ÇÇ
    comm g := by
      ext : 1
      apply Representation.map‚ÇÇ_comm
  }
  naturality := by
    intro N L f
    ext x
    dsimp only [Representation.map‚ÇÇ, ind‚ÇÅ']
    ext x
    simp

    sorry

omit [Finite G] [DecidableEq G] in
lemma map‚ÇÇ_app_gg_ind‚ÇÅ'_œÄ_app :  map‚ÇÇ.app M ‚â´ ind‚ÇÅ'_œÄ.app M = 0 := by
  ext : 2
  apply Representation.ind‚ÇÅ'_œÄ_comp_map‚ÇÇ

omit [Finite G] [DecidableEq G] in
lemma map‚ÇÇ_gg_ind‚ÇÅ'_œÄ : map‚ÇÇ (R := R) (G := G) ‚â´ ind‚ÇÅ'_œÄ = 0 := by
  ext : 2
  apply map‚ÇÇ_app_gg_ind‚ÇÅ'_œÄ_app

/--
Let `M` be a representation of a finite cyclic group `G`.
Then the following square commutes

  ` coind‚ÇÅ'.obj M -------> coind‚ÇÅ'.obj M `
  `      |                      |        `
  `      |                      |        `
  `      ‚Üì                      ‚Üì        `
  `   ind‚ÇÅ'.obj M ------->   ind‚ÇÅ'.obj M `

The vertical maps are the canonical isomorphism `ind‚ÇÅ'_iso_coind‚ÇÅ`
and the horizontal maps are `map‚ÇÅ` and `map‚ÇÇ`.
-/
lemma map‚ÇÅ_comp_ind‚ÇÅ'_iso_coind‚ÇÅ' :
    map‚ÇÅ.app M ‚â´ (ind‚ÇÅ'_iso_coind‚ÇÅ'.app M).inv = (ind‚ÇÅ'_iso_coind‚ÇÅ'.app M).inv ‚â´ map‚ÇÇ.app M :=
  sorry


/--
For a cyclic group `G`, this is the sequence of representations of a cyclic group:

` 0 ‚ü∂ M ‚ü∂ coind‚ÇÅ'.obj M ‚ü∂ ind‚ÇÅ'.obj M ‚ü∂ M ‚ü∂ 0 `.

The middle map is `map‚ÇÅ ‚â´ ind‚ÇÅ'_iso_coind‚ÇÅ'.inv`, which is
equal to `ind‚ÇÅ'_iso_coind‚ÇÅ'.inv ‚â´ map‚ÇÇ`. The sequence is exact.

It might be sensible to make this into a functor.
-/
def periodicitySequence : CochainComplex (Rep R G) (Fin 4) where
  X
  | 0 => M
  | 1 => coind‚ÇÅ'.obj M
  | 2 => ind‚ÇÅ'.obj M
  | 3 => M
  d
  | 0,1 => coind‚ÇÅ'_Œπ.app M
  | 1,2 => map‚ÇÅ.app M ‚â´ (ind‚ÇÅ'_iso_coind‚ÇÅ'.app M).inv
  | 2,3 => ind‚ÇÅ'_œÄ.app M
  | _,_ => 0
  d_comp_d' := by
    intro i j k hij hjk
    fin_cases i
    all_goals
      fin_cases j
      try simp only [Fin.reduceFinMk, Fin.isValue, Fin.zero_eta, Iso.app_inv, zero_comp]
      fin_cases k
      all_goals
        try simp only [Fin.reduceFinMk, Fin.isValue, Fin.zero_eta, Fin.mk_one, comp_zero,
          Iso.app_inv, zero_comp]
    ¬∑ rw [‚Üê Category.assoc, coind_Œπ_gg_map‚ÇÅ_app, zero_comp]
    ¬∑ fin_cases k
      all_goals try simp only [Fin.reduceFinMk, Fin.isValue, comp_zero]
      rw [‚Üê Iso.app_inv _ _, map‚ÇÅ_comp_ind‚ÇÅ'_iso_coind‚ÇÅ', Category.assoc,
        map‚ÇÇ_app_gg_ind‚ÇÅ'_œÄ_app, comp_zero]

lemma periodicitySequence_exactAt_one : (periodicitySequence M).ExactAt 1 := sorry

lemma periodicitySequence_exactAt_two : (periodicitySequence M).ExactAt 2 := sorry

include instCyclic in
def up_obj_iso_down_obj : up.obj M ‚âÖ down.obj M :=
  have := instCyclic
  /-
  `up.obj M` is the cokernel of the first map is `periodicitySequence`,
  so is isomorphic to the image of the second map. This in turn is isomorphic to the
  kernel of the last map, which is `down.obj M`.
  -/
  sorry

def up_iso_down : up (R := R) (G := G) ‚âÖ down where
  hom := {
    app M := (up_obj_iso_down_obj M).hom
    naturality L N f := by
      ext v
      simp [up_obj_iso_down_obj]
      sorry
  }
  inv := {
    app M := (up_obj_iso_down_obj M).inv
    naturality := sorry
  }

def periodicCohomology (n : ‚Ñï) :
    functor R G (n + 1) ‚âÖ functor R G (n + 3) := by
  apply Iso.trans (down_Œ¥iso_natTrans n)
  apply Iso.trans (Functor.isoWhiskerRight up_iso_down.symm _)
  apply up_Œ¥iso_natTrans

def periodicCohomology' (n m : ‚Ñï) :
    functor R G (n + 1) ‚âÖ functor R G (n + 1 + 2 * m) := by
  induction m with
  | zero =>
    apply Iso.refl
  | succ m ih =>
    apply Iso.trans ih
    rw [mul_add, mul_one, ‚Üêadd_assoc, add_assoc, add_comm 1, ‚Üêadd_assoc]
    apply periodicCohomology

def periodicCohomology_mod2 (m n : ‚Ñï) (h : m ‚â° n [MOD 2]) :
    functor R G (m + 1) ‚âÖ functor R G (n + 1) :=
  if hLe : m ‚â§ n then
    (periodicCohomology' m ((n - m) /2)).trans <| eqToIso (by grind [Nat.modEq_iff_dvd])
  else
   (eqToIso (by grind [Nat.modEq_iff_dvd])).trans (periodicCohomology' n ((m - n) /2)).symm

omit [DecidableEq G] in
/--
Let `M` be a representation of a finite cyclic group `G`. Suppose there are even
and positive integers `e` and `o` with `e` even and `o` odd, such that
`H·µâ(G,M)` and `H·µí(G,M)` are both zero.
Then `H‚Åø(G,M)` is zero for all `n > 0`.
-/
lemma isZero_ofEven_Odd {M : Rep R G} {a b : ‚Ñï}
    (h‚Çë : IsZero (groupCohomology M (2 * a + 2)))
    (h‚Çí : IsZero (groupCohomology M (2 * b + 1))) (n : ‚Ñï) :
    IsZero (groupCohomology M (n + 1)) := by
  obtain hn | hn := n.even_or_odd
  ¬∑ refine .of_iso h‚Çí <| (periodicCohomology_mod2 n (2 * b) ?_).app M
    grind [Nat.modEq_iff_dvd, Nat.even_iff]
  ¬∑ refine .of_iso h‚Çë <| (periodicCohomology_mod2 n (2 * a + 1) ?_).app M
    grind [Nat.modEq_iff_dvd, Nat.odd_iff]

end Rep

end
